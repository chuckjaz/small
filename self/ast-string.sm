let
    ast = import "ast.sm",
    bools = import "bools",
    ints = import "ints",
    strings = import "strings",

    LiteralBoolean = ast.LiteralBoolean,
    LiteralInt = ast.LiteralInt,
    LiteralString = ast.LiteralString,
    LiteralNull = ast.LiteralNull,
    Reference = ast.Reference,
    Let = ast.Let,
    Binding = ast.Binding,
    Lambda = ast.Lambda,
    Call = ast.Call,
    Record = ast.Record,
    Member = ast.Member,
    Array = ast.Array,
    Select = ast.Select,
    Index = ast.Index,
    Projection = ast.Projection,
    Match = ast.Match,
    MatchClause = ast.MatchClause,
    Variable = ast.Variable,

    astString = /l.let
        c = /l.match l {
            [] in [],
            [#h, ...#t] in [string(h), ...c(t)]
        }
    in strings.join(c(l), ", "),
    string = /a.match a {
        { #LiteralBoolean, #value } in bools.string(value),
        { #LiteralInt, #value } in ints.string(value),
        { #LiteralString, #value } in strings.concat("\"", value, "\""),
        { #LiteralNull } in "null",
        { #Reference, #name } in name,
        { #Let, #bindings, #body } in strings.concat("let ", astString(bindings), " in ", string(body)),
        { #Binding, #name, #value } in strings.concat(name, " = ", string(value)),
        { #Lambda, #parameters, #body } in strings.concat("/(", strings.join(parameters, ", "), ").", string(body)),
        { #Call, #target, #args } in strings.concat(string(target), "(", astString(args), ")"),
        { #Record, #members } in strings.concat("{ ", astString(members), " }"),
        { #Member, #name, #value } in strings.concat(name, ": ", string(value)),
        { #Array, #values } in strings.concat("[", astString(values), "]"),
        { #Select, #target, #name } in strings.concat(string(target), ".", name),
        { #Index, #target, #index } in strings.concat(string(target), "[", string(index), "]"),
        { #Projection, #value } in strings.concat("...", string(value)),
        { #Match, #target, #clauses } in strings.concat("match ", string(target), " { ", astString(clauses), " }"),
        { #MatchClause, #pattern, #value } in strings.concat(string(pattern), " in ", string(value)),
        { #Variable, #name } in strings.concat("#", name)
    }
in { string }