let
    ast = import "../ast.sm",
    logs = import "logs",
    files = import "files",
    astString = import "../ast-string.sm".string,
    parser = import "../parser.sm",
    Lexer = import "../lexer.sm".Lexer,
    Token = import "../token.sm".Token,
    number = /lex.match lex.token {
        Token.Integer in { result: lex.value, lex: lex.next() },
        #_ in { message: "Expected a number", lex }
    },
    expect = /(expected, result).match result {
        expected in ["Passed", result],
        { result: #result } in expect(expected, result),
        { #message } in ["Error", message ],
        #else in ["Error", "Expected", expected, "received", else]
    },
    display = /r.match r {
        [] in [],
        [#h, ...#t] in [display(h), ...display(t)],
        { #result } in result,
        { #message } in [ "Error", message ]
    },
    parse = /(string, parser).match parser(Lexer(string)) {
        { #result } in astString(result),
        { #message } in message,
        #else in else
    },
    matches = /(text, value, parser).expect(value, parse(text, parser)),
    identical = /(value, parser).matches(value, value, parser),
    numbers = parser.listOf(number),
    file = /fileName.
        let
            text = files.readFile(fileName),
            lex = Lexer(text),
            module = parser.module(lex)
        in match module {
            { #message } in ["Failed", fileName, module],
            { #result } in ["Passed", fileName],
            #else in ["Failed", "unexpected", else]
        },
in [
    [
        expect([], numbers(Lexer(""))),
        expect([1], numbers(Lexer("1"))),
        expect([1], numbers(Lexer("1,"))),
        expect([1, 2], numbers(Lexer("1, 2"))),
        expect([1, 2], numbers(Lexer("1, 2,"))),
        expect([1, 2, 3], numbers(Lexer("1, 2, 3"))),
        expect([1, 2, 3], numbers(Lexer("1, 2, 3,")))
    ],
    [
        identical("1", parser.expression),
        identical("\"abc\"", parser.expression),
        identical("true", parser.expression),
        identical("false", parser.expression),
        identical("null", parser.expression),
        identical("import \"a\"", parser.expression),
        identical("a", parser.expression),
        matches("/a.a", "/(a).a",  parser.expression),
        identical("/(a, b, c).a", parser.expression),
        identical("/().a", parser.expression),
        identical("let a = 1 in a", parser.expression),
        identical("#a", parser.expression),
        matches("(a)", "a", parser.expression),
        [
            matches("{}", "{  }", parser.expression)
            matches("{ a }", "{ a: a }", parser.expression),
            matches("{a, b, c}", "{ a: a, b: b, c: c }", parser.expression),
            matches("{a:1, b:2, c:3}", "{ a: 1, b: 2, c: 3 }", parser.expression),
            matches("{a: 1, ...b, c: 3}", "{ a: 1, ...b, c: 3 }", parser.expression),
        ],
        [
            identical("[]", parser.expression),
            identical("[1]", parser.expression),
            matches("[1, ]", "[1]", parser.expression),
            identical("[1, 2]", parser.expression),
            matches("[1, 2, ]", "[1, 2]", parser.expression),
            identical("[1, 2, 3]", parser.expression),
            matches("[1, 2, 3, ]", "[1, 2, 3]", parser.expression),
            identical("[1, ...a, 2, 3]", parser.expression)
        ],
        [
            identical("match a { a in a }", parser.expression),
            identical("match [1, 2] { [1, #a] in a, [#b, 2] in b }", parser.expression),
            matches("match 1 { a in a  a in a }", "match 1 { a in a, a in a }", parser.expression)
        ],
        [
            identical("a[a]", parser.expression),
            identical("a[a][a]", parser.expression),
        ],
        [
            identical("a(a)", parser.expression),
            identical("a(a, b)", parser.expression),
            identical("a(a, b, c)", parser.expression),
            identical("a(a)(b)(c)", parser.expression),
        ]
    ],
    [
        file("self/ast-string.sm"),
        file("self/ast.sm"),
        file("self/lexer.sm"),
        file("self/parser-combinator.sm"),
        file("self/parser.sm"),
        file("self/token.sm")
    ]
]