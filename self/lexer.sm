let
    substr = import "strings".sub,
    concat = import "strings".concat,
    code = import "strings".code,
    add = import "ints".add,
    sub = import "ints".sub,
    mul = import "ints".mul,

    Token = import "token.sm".Token,

    Lexer = /text.let
        ret = /(text, value, token).{ value, token, next: /().next(text) },
        next = /text.let
            loop = /(text).let
                c = substr(text, 0, 1),
                rest = substr(text, 1),
                ident = /(text, value).let
                    c = substr(text, 0, 1),
                    rest = substr(text, 1),
                in match c {
                    "A" in ident(rest, concat(value, c)),
                    "B" in ident(rest, concat(value, c)),
                    "C" in ident(rest, concat(value, c)),
                    "D" in ident(rest, concat(value, c)),
                    "E" in ident(rest, concat(value, c)),
                    "F" in ident(rest, concat(value, c)),
                    "G" in ident(rest, concat(value, c)),
                    "H" in ident(rest, concat(value, c)),
                    "I" in ident(rest, concat(value, c)),
                    "J" in ident(rest, concat(value, c)),
                    "K" in ident(rest, concat(value, c)),
                    "L" in ident(rest, concat(value, c)),
                    "M" in ident(rest, concat(value, c)),
                    "N" in ident(rest, concat(value, c)),
                    "O" in ident(rest, concat(value, c)),
                    "P" in ident(rest, concat(value, c)),
                    "Q" in ident(rest, concat(value, c)),
                    "R" in ident(rest, concat(value, c)),
                    "S" in ident(rest, concat(value, c)),
                    "T" in ident(rest, concat(value, c)),
                    "U" in ident(rest, concat(value, c)),
                    "V" in ident(rest, concat(value, c)),
                    "W" in ident(rest, concat(value, c)),
                    "X" in ident(rest, concat(value, c)),
                    "Y" in ident(rest, concat(value, c)),
                    "Z" in ident(rest, concat(value, c)),
                    "a" in ident(rest, concat(value, c)),
                    "b" in ident(rest, concat(value, c)),
                    "c" in ident(rest, concat(value, c)),
                    "d" in ident(rest, concat(value, c)),
                    "e" in ident(rest, concat(value, c)),
                    "f" in ident(rest, concat(value, c)),
                    "g" in ident(rest, concat(value, c)),
                    "h" in ident(rest, concat(value, c)),
                    "i" in ident(rest, concat(value, c)),
                    "j" in ident(rest, concat(value, c)),
                    "k" in ident(rest, concat(value, c)),
                    "l" in ident(rest, concat(value, c)),
                    "m" in ident(rest, concat(value, c)),
                    "n" in ident(rest, concat(value, c)),
                    "o" in ident(rest, concat(value, c)),
                    "p" in ident(rest, concat(value, c)),
                    "q" in ident(rest, concat(value, c)),
                    "r" in ident(rest, concat(value, c)),
                    "s" in ident(rest, concat(value, c)),
                    "t" in ident(rest, concat(value, c)),
                    "u" in ident(rest, concat(value, c)),
                    "v" in ident(rest, concat(value, c)),
                    "w" in ident(rest, concat(value, c)),
                    "x" in ident(rest, concat(value, c)),
                    "y" in ident(rest, concat(value, c)),
                    "z" in loop(rest, concat(value, c)),
                    "_" in loop(rest, concat(value, c)),
                    "0" in loop(rest, concat(value, c)),
                    "1" in loop(rest, concat(value, c)),
                    "2" in loop(rest, concat(value, c)),
                    "3" in loop(rest, concat(value, c)),
                    "4" in loop(rest, concat(value, c)),
                    "5" in loop(rest, concat(value, c)),
                    "6" in loop(rest, concat(value, c)),
                    "7" in loop(rest, concat(value, c)),
                    "8" in loop(rest, concat(value, c)),
                    "9" in loop(rest, concat(value, c)),
                    #_ in match value {
                        "false" in ret(text, value, Token.False),
                        "in" in ret(text, value, Token.In),
                        "let" in ret(text, value, Token.Let),
                        "match" in ret(text, value, Token.Match),
                        "null" in ret(text, value, Token.Null),
                        "true" in ret(text, value, Token.True),
                        "import" in ret(text, value, Token.Import),
                        #_ in ret(text, value, Token.Identifier)
                    }
                },
                number = /(text, value).let
                    c = substr(text, 0, 1),
                    rest = substr(text, 1),
                    shift = /().add(mul(value, 10), sub(code(c), code("0")))
                in match c {
                    "0" in number(rest, shift()),
                    "1" in number(rest, shift()),
                    "2" in number(rest, shift()),
                    "3" in number(rest, shift()),
                    "4" in number(rest, shift()),
                    "5" in number(rest, shift()),
                    "6" in number(rest, shift()),
                    "7" in number(rest, shift()),
                    "8" in number(rest, shift()),
                    "9" in number(rest, shift()),
                    #_ in ret(text, value, Token.Integer)
                },
                string = /(text, value).let
                    c = substr(text, 0, 1),
                    rest = substr(text, 1)
                in match c {
                    "" in ret(text, null, Token.Error),
                    "\n" in ret(rest, null, Token.Error),
                    "\"" in ret(rest, value, Token.String),
                    #_ in string(rest, concat(value, c))
                },
                dot = /(rest).match substr(rest, 0, 1) {
                    "." in match substr(rest, 1, 2) {
                        "." in ret(substr(rest, 2), null, Token.Project),
                        #_ in ret(rest, null, Token.Dot)
                    },
                    #_ in ret(rest, null, Token.Dot)
                }
            in match c {
                " " in loop(rest),
                "\n" in loop(rest),
                "\r" in loop(rest),
                "A" in ident(rest, c),
                "B" in ident(rest, c),
                "C" in ident(rest, c),
                "D" in ident(rest, c),
                "E" in ident(rest, c),
                "F" in ident(rest, c),
                "G" in ident(rest, c),
                "H" in ident(rest, c),
                "I" in ident(rest, c),
                "J" in ident(rest, c),
                "K" in ident(rest, c),
                "L" in ident(rest, c),
                "M" in ident(rest, c),
                "N" in ident(rest, c),
                "O" in ident(rest, c),
                "P" in ident(rest, c),
                "Q" in ident(rest, c),
                "R" in ident(rest, c),
                "S" in ident(rest, c),
                "T" in ident(rest, c),
                "U" in ident(rest, c),
                "V" in ident(rest, c),
                "W" in ident(rest, c),
                "X" in ident(rest, c),
                "Y" in ident(rest, c),
                "Z" in ident(rest, c),
                "a" in ident(rest, c),
                "b" in ident(rest, c),
                "c" in ident(rest, c),
                "d" in ident(rest, c),
                "e" in ident(rest, c),
                "f" in ident(rest, c),
                "g" in ident(rest, c),
                "h" in ident(rest, c),
                "i" in ident(rest, c),
                "j" in ident(rest, c),
                "k" in ident(rest, c),
                "l" in ident(rest, c),
                "m" in ident(rest, c),
                "n" in ident(rest, c),
                "o" in ident(rest, c),
                "p" in ident(rest, c),
                "q" in ident(rest, c),
                "r" in ident(rest, c),
                "s" in ident(rest, c),
                "t" in ident(rest, c),
                "u" in ident(rest, c),
                "v" in ident(rest, c),
                "w" in ident(rest, c),
                "x" in ident(rest, c),
                "y" in ident(rest, c),
                "z" in ident(rest, c),
                "_" in ident(rest, c),
                "0" in number(rest, 0),
                "1" in number(rest, 1),
                "2" in number(rest, 2),
                "3" in number(rest, 3),
                "4" in number(rest, 4),
                "5" in number(rest, 5),
                "6" in number(rest, 6),
                "7" in number(rest, 7),
                "8" in number(rest, 8),
                "9" in number(rest, 9),
                "\"" in string(rest, ""),
                "/" in ret(rest, null, Token.Lambda),
                "." in dot(rest),
                "," in ret(rest, null, Token.Comma),
                ":" in ret(rest, null, Token.Colon),
                "=" in ret(rest, null, Token.Equal),
                "(" in ret(rest, null, Token.LParen),
                ")" in ret(rest, null, Token.RParen),
                "[" in ret(rest, null, Token.LBrack),
                "]" in ret(rest, null, Token.RBrack),
                "{" in ret(rest, null, Token.LBrace),
                "}" in ret(rest, null, Token.RBrace),
                "#" in ret(rest, null, Token.Hash),
                "" in ret(text, null, Token.EOF),
                #_ in ret(text, null, Token.Error)
            },
        in loop(text)
    in
        next(text)
in { Lexer }